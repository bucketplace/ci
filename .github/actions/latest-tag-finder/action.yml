name: "Latest Tag Finder"
description: "finds release tags and generate next tag with app name"
inputs:
  prefix:
    description: "사용하고자 하는 Prefix (eg. sample-service-v)"
    default: ""
    required: false
  bump:
    description: "next tag에서 SemVer 어떤 부분(major, minor, patch)를 올릴지 결정"
    default: "patch"
    required: false
  ref:
    description: "어디서부터 Tag를 찾을지 결정 기본값은 action이 실행된 ref"
    default: ''
    required: false
outputs:
  next-tag:
    description: "다음 Tag 명 (eg. sample-service-v1.0.1)"
    value: ${{ steps.generate-next-tag.outputs.tag }}
  current-tag:
    description: "현재 Tag 명 (eg. sample-service-v1.0.0)"
    value: ${{ steps.current-tag.outputs.tag }}
  next-version:
    description: "다음 Version (eg. 1.0.1)"
    value: ${{ steps.generate-next-tag.outputs.version }}
  current-version:
    description: "현재 Version (eg. 1.0.0)"
    value: ${{ steps.current-tag.outputs.version }}
  major:
    description: "다음 Major Version (eg. 1)"
    value: ${{ steps.next-version.outputs.major }}
  minor:
    description: "다음 Minor Version (eg. 0)"
    value: ${{ steps.next-version.outputs.minor }}
  patch:
    description: "다음 Patch Version (eg. 1)"
    value: ${{ steps.next-version.outputs.patch }}
  
runs:
  using: composite
  steps:
    - name: "Checkout all Tags"
      id: checkout-tags
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
        ref: ${{ inputs.ref }}
        path: "__temp__99"
    - name: "Find Current Tag"
      id: current-tag  # The step ID to refer to later.
      run: |
        cd __temp__99
        LATEST_TAG=$(git tag -l "${{ inputs.prefix }}*" --merged | grep -E '^${{ inputs.prefix }}[0-9]+\.[0-9]+\.[0-9]+$' |sort --version-sort -r | head -n 1 | tr -d '[:space:]')
        echo "version=${LATEST_TAG#${{ inputs.prefix }}}" >> $GITHUB_OUTPUT
        echo "tag=${LATEST_TAG}" >> $GITHUB_OUTPUT
        rm -rf __temp__99
      shell: bash
    - name: Parsing SemVer
      uses: madhead/semver-utils@latest
      id: version
      with:
        version: ${{ steps.current-tag.outputs.version }}
    - name: Generate Next Tag and Version
      id: generate-next-tag
      run: |
        GEN_VERSION="${{ steps.version.outputs.inc-patch }}"
        if [[ "${{ inputs.bump }}" == "minor" ]]; then
          GEN_VERSION="${{ steps.version.outputs.inc-minor }}"
        fi
        if [[ "${{ inputs.bump }}" == "major" ]]; then
          GEN_VERSION="${{ steps.version.outputs.inc-major }}"
        fi
        GEN_TAG="${{ inputs.prefix }}${GEN_VERSION}"
        echo "tag=${GEN_TAG}" >> $GITHUB_OUTPUT
        echo "version=${GEN_VERSION}" >> $GITHUB_OUTPUT
      shell: bash
    - name: Parsing Next SemVer
      uses: madhead/semver-utils@latest
      id: next-version
      with:
        version: ${{ steps.generate-next-tag.outputs.version }}
