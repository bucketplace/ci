name: "Node.js Test"

on:
  workflow_call:
    inputs:
      nodejs-version:
        description: "Specifies what Node.js version to use"
        required: false
        default: '16'
        type: string
      package-manager:
        description: "Specifies which package manager to use"
        required: false
        default: ''
        type: string
      test-command:
        description: "Specifies a test command that will be passed to the package manager"
        required: false
        default: 'test'
        type: string
      test-command-args:
        description: "Specifies an optional arguments to the test command"
        required: false
        default: ''
        type: string

env:
  NODE_ENV: development # This must always be set. Otherwise, required dependencies to run test will not be installed or inconsistency happens.
  CI: true

jobs:
  run-test:
    name: Run Node.js test
    runs-on: [self-hosted, Linux, X64, cache, node-16]
    steps:
      - name: Check out code
        uses: actions/checkout@v3
      - name: Use Node.js ${{ inputs.nodejs-version }}
        run: echo ${{ inputs.nodejs-version }} > .nvmrc && nvm use
      - name: Determine which package manager to use
        id: package-manager
        run: |
          PACKAGE_MANAGER="${{ inputs.package-manager }}"
          # Try to infer which package manager currently in use if not specified
          if [[ "${PACKAGE_MANAGER}" == "" ]]; then
            if [[ -f "yarn.lock" ]]; then
              if [[ -d ".yarn/" ]]; then
                PACKAGE_MANAGER="yarn"
              else
                PACKAGE_MANAGER="yarn-legacy"
              fi
            else
              PACKAGE_MANAGER="npm"
            fi
          fi
          # Prepare outputs
          case $PACKAGE_MANAGER in
            npm)
              PKG_BIN="npm"
              INSTALL_CMD="npm ci"
              ;;
            yarn)
              PKG_BIN="yarn"
              INSTALL_CMD="yarn install --immutable"
              ;;
            yarn-legacy)
              PKG_BIN="yarn"
              INSTALL_CMD="yarn install --frozen-lockfile"
              ;;
            *)
              echo "Unknown package manager type"
              exit 1
              ;;
          esac
          # Print outputs
          echo "Using the package manager: ${PKG_BIN}"
          echo "bin=${PKG_BIN}" >> $GITHUB_OUTPUT
          echo "Using the install command: ${INSTALL_CMD}"
          echo "install-command=${INSTALL_CMD}" >> $GITHUB_OUTPUT
      - name: Install dependencies
        run: ${{ steps.package-manager.outputs.install-command }}
      - name: Run test
        run: ${{ steps.package-manager.outputs.bin }} ${{ inputs.test-command }} ${{ inputs.test-command-args }}
