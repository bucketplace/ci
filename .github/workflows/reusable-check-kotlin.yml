name: "Check Kotlin"

on:
  workflow_call:
    inputs:
      app-name:
        description: "앱 이름"
        required: true
        type: string
      app-path:
        type: string
        description: "앱 기준 디렉토리"
        required: false
        default: "."
      version:
        description: "릴리즈 Tag (semver, eg. X.X.X)"
        required: false
        type: string
        default: ""
      gradlew-path:
        type: string
        description: "gradlew가 있는 path"
        required: false
        default: "."
      sonar-host-url:
        type: string
        description: "host url of sonarqube"
        required: false
        default: "https://sonarqube.co-workerhou.se"
      prod:
        type: boolean
        description: "true if prod"
        default: false
        required: false
    secrets:
      SONAR_TOKEN:
        required: true
jobs:   
  check-and-report:
    name: Lint, Test And Reports
    runs-on: [self-hosted, Linux, X64, mortar-runner]
    steps:
      - if: ${{ inputs.version != ''}}
        name: Check Version
        id: check-version
        run: |
          if [[ ! "${{ inputs.version }}" =~ ^[0-9]+[\.][0-9]+[\.][0-9]+$ ]];then
            echo "invalid version: ${{ inputs.version }}" 1>&2
            echo "버전 포멧이 맞지 않습니다. 버전은 반드시 x.x.x 이어야 합니다 (v 제외): ${{ inputs.version }}" >> "$GITHUB_STEP_SUMMARY"
            exit 100
          fi
        shell: bash
      - name: Check out code
        uses: actions/checkout@v2
      - if: ${{ !inputs.prod }}
        name: Setup Reviewdog
        uses: reviewdog/action-setup@v1
        with:
          reviewdog_version: latest # Optional. [latest,nightly,v.X.Y.Z]
      - name: Get Main SHA
        id: get-sha
        run: |
          echo "::set-output name=sha::$(git rev-parse refs/remotes/origin/HEAD)"
      - name: Check Conditions
        id: check-conditions
        run: |
          if [[ "${{ startsWith(github.event_name, 'pull_request') }}" == "true" ]]; then
            RD_REPORT="github-pr-review"
          elif [[ "${{ github.event.head_commit != null }}" == "true" ]]; then
            RD_REPORT="github-check"
          else
            RD_REPORT="local"
            RD_DIFF="-diff=\"git diff ${{ steps.get-sha.outputs.sha }} ${{ inputs.app-path }}"
          fi
          SONAR_VERSION="${{ steps.get-sha.outputs.sha }}"
          if [[ "${{ inputs.prod }}" != "true" ]]; then
            SONAR_VERSION="${SONAR_VERSION}-candidate"
          fi

          echo "::set-output name=reviewdog-reporter::${RD_REPORT}"
          echo "::set-output name=reviewdog-diff::${RD_DIFF}"
          echo "::set-output name=sonar_version::${SONAR_VERSION}"
          echo "::set-output name=quality-gate::${{!inputs.prod}}"
        shell: bash
      - name: Report Summary
        run: |
          cat >> "$GITHUB_STEP_SUMMARY" << EOF
          ## Request Information
          | Name | Details |
          | --- | --- |
          | App Name | ${{ inputs.app-name }} |
          | App Path | ${{ inputs.app-path }} |
          | Gradle Path | ${{ inputs.gradlew-path}}/gradlew |
          | Sonar Version | ${{ steps.check-conditions.outputs.sonar_version }} |
          | Deployed By | @${{ github.actor }} |

          EOF

          if [[ -f "${{ inputs.app-path }}"/mortar.yaml ]]; then
              echo "<details><summary><b>mortar.yaml</b></summary>" >> "$GITHUB_STEP_SUMMARY"
              echo "" >> "$GITHUB_STEP_SUMMARY"
              echo '``` yaml' >> "$GITHUB_STEP_SUMMARY"
              cat "${{ inputs.app-path }}"/mortar.yaml >> "$GITHUB_STEP_SUMMARY"
              echo '```' >> "$GITHUB_STEP_SUMMARY"
              echo "" >> "$GITHUB_STEP_SUMMARY"
              echo "</details>" >> "$GITHUB_STEP_SUMMARY"
          fi 
        shell: bash
      - name: Run gradle for lint, test and sonarqube
        id: gradle-run
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ inputs.sonar-host-url }}
          GRADLE_HOME: /runner/.gradle
        run: |
          ${{ inputs.gradlew-path }}/gradlew check jacocoTestReport sonarqube \
          --project-dir=${{ inputs.app-path }} \
          --info \
          --continue \
          -Dsonar.qualitygate.wait=${{ steps.check-conditions.outputs.quality-gate }} \
          -Dsonar.projectVersion='${{ steps.check-conditions.outputs.sonar_version }}' \
          -Dsonar.projectName="${{ inputs.app-name }}"
        shell: bash
      - if: failure()
        name: Upload Reports
        uses: actions/upload-artifact@v3
        with:
          name: Failure Reports
          path: ${{ inputs.app-path }}/build/reports/
      - if: always() && github.event_name != 'workflow_dispatch' && !inputs.prod
        name: Add coverage to PR
        uses: madrapps/jacoco-report@v1.3
        with:
          paths: ${{ inputs.app-path }}/build/reports/jacoco/test/jacocoTestReport.xml
          token: ${{ secrets.GITHUB_TOKEN }}
          min-coverage-overall: 70
          min-coverage-changed-files: 70
      - if: always() && !inputs.prod
        name: Run reviewdog
        env:
          REVIEWDOG_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPORTS_DIR: ${{ inputs.app-path }}/build/reports
        continue-on-error: true
        run: |
          function review {
            file=$1
            review_name=$2
            if [[ -f "$file" ]]; then
              cat "$file" | reviewdog \
              -reporter="${{ steps.check-conditions.outputs.reviewdog-reporter }}" \
              -f=checkstyle \
              --name="${review_name}" \
               ${{steps.check-conditions.outputs.reviewdog-diff}}
            fi
          }
          review "$REPORTS_DIR"/ktlint/ktlintKotlinScriptCheck/ktlintKotlinScriptCheck.xml "Report / ktlint-script"
          review "$REPORTS_DIR"/ktlint/ktlintMainSourceSetCheck/ktlintMainSourceSetCheck.xml "Report / ktlint-source"
          review "$REPORTS_DIR"/ktlint/ktlintTestSourceSetCheck/ktlintTestSourceSetCheck.xml "Report / ktlint-test"
          review "$REPORTS_DIR"/detekt/detekt.xml "Report / detekt"
        shell: bash
  