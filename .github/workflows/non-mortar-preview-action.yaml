name: üöÄ Non Mortar Preview Action

on:
  workflow_call:
    inputs:
      application:
        description: "Î∞∞Ìè¨Ìï† Ïï†ÌîåÎ¶¨ÏºÄÏù¥ÏÖò"
        type: string
        required: true
      profile:
        description: "Î∞∞Ìè¨ ÌôòÍ≤Ω"
        type: string
        required: true
      ecr-repository:
        type: string
        required: true
      base-domain:
        type: string
        required: true
      destination:
        type: string
        required: true
      working-directory:
        type: string
        required: true
      account-type:
        type: string
        required: true

jobs:
  check-comment:
    runs-on: [self-hosted, Linux, X64, no-cache]
    if: github.event.action != 'closed'
    outputs:
      triggered: ${{ steps.check.outputs.triggered }}
    steps:
      - uses: bucketplace/comment-trigger@v1.0
        id: check
        with:
          trigger: '/preview ${{ inputs.application }}'
          reaction: rocket
        env:
          GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'

  build-and-push:
    runs-on: [self-hosted, Linux, X64, cache]
    needs: check-comment
    if: needs.check-comment.outputs.triggered == 'true'
    outputs:
      image_tag: ${{ steps.vars.outputs.image_tag }}
      pr_ref: ${{ fromJson(steps.get_pull_request_ref.outputs.data).head.ref }}
      pr_title: ${{ fromJson(steps.get_pull_request_ref.outputs.data).title }}
      pr_url: ${{ fromJson(steps.get_pull_request_ref.outputs.data).html_url }}
      pr_assignee: ${{ fromJson(steps.get_pull_request_ref.outputs.data).assignee.login }}
    steps:
      - name: Resolve AWS environment
        id: aws
        run: |
          if [ "${{ inputs.account-type }}" == "DATA" ] 
          then
            echo "::add-mask::${{ secrets.DATA_AWS_ACCESS_KEY_ID }}"
            echo "access_key_id=${{ secrets.DATA_AWS_ACCESS_KEY_ID }}" >> "$GITHUB_OUTPUT"
            echo "::add-mask::${{ secrets.DATA_AWS_SECRET_ACCESS_KEY }}"
            echo "secret_access_key=${{ secrets.DATA_AWS_SECRET_ACCESS_KEY }}" >> "$GITHUB_OUTPUT"
            echo "::add-mask::${{ secrets.DATA_AWS_ACCOUNT_ID }}"
            echo "account_id=${{ secrets.DATA_AWS_ACCOUNT_ID }}" >> "$GITHUB_OUTPUT"
          elif [ "${{ inputs.account-type }}" == "DEV" ] 
          then
            echo "::add-mask::${{ secrets.DEV_AWS_ACCESS_KEY_ID }}"
            echo "access_key_id=${{ secrets.DEV_AWS_ACCESS_KEY_ID }}" >> "$GITHUB_OUTPUT"
            echo "::add-mask::${{ secrets.DEV_AWS_SECRET_ACCESS_KEY }}"
            echo "secret_access_key=${{ secrets.DEV_AWS_SECRET_ACCESS_KEY }}" >> "$GITHUB_OUTPUT"
            echo "::add-mask::${{ secrets.DEV_AWS_ACCOUNT_ID }}"
            echo "account_id=${{ secrets.DEV_AWS_ACCOUNT_ID }}" >> "$GITHUB_OUTPUT"
          else
            echo "::add-mask::${{ secrets.AWS_ACCESS_KEY_ID }}"
            echo "access_key_id=${{ secrets.AWS_ACCESS_KEY_ID }}" >> "$GITHUB_OUTPUT"
            echo "::add-mask::${{ secrets.AWS_SECRET_ACCESS_KEY }}"
            echo "secret_access_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> "$GITHUB_OUTPUT"
            echo "::add-mask::${{ secrets.AWS_ACCOUNT_ID }}"
            echo "account_id=${{ secrets.AWS_ACCOUNT_ID }}" >> "$GITHUB_OUTPUT"
          fi
        shell: bash
      - name: get pull request ref
        id: get_pull_request_ref
        uses: octokit/request-action@v2.x
        with:
          route: GET /repos/:repository/pulls/:issue_id
          repository: ${{ github.repository }}
          issue_id: ${{ github.event.issue.number }}
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"

      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: ${{ fromJson(steps.get_pull_request_ref.outputs.data).head.ref }}

      - name: Get image tag
        id: vars
        run: echo "image_tag=preview-$(git rev-parse --short HEAD)" >> "$GITHUB_OUTPUT"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ steps.aws.outputs.access_key_id }}
          aws-secret-access-key: ${{ steps.aws.outputs.secret_access_key }}
          aws-region: ap-northeast-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ steps.vars.outputs.image_tag }}
          WORKING_DIRECTORY: ${{ inputs.working-directory }}
          ECR_REPOSITORY: ${{ inputs.ecr-repository }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build \
            --target app \
            --build-arg ACCESS_TOKEN=${{ secrets.BP_DEPLOYER_GITHUB_TOKEN }} \
            -t "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" \
            -f "$WORKING_DIRECTORY/Dockerfile" \
            -- "./$WORKING_DIRECTORY"
          docker push "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
      - if: ${{ failure() }}
        uses: bucketplace/pull-request-add-comment-action@main
        with:
          message: |-
            preview Î∞∞Ìè¨ Ïã§Ìå®
          GITHUB_TOKEN: ${{ secrets.BP_DEPLOYER_GITHUB_TOKEN }}

  preview-request:
    runs-on: [self-hosted, Linux, X64, no-cache]
    needs: build-and-push
    steps:
      - name: Preview request
        id: pr
        uses: bucketplace/preview-request-action@v2.1.0
        env:
          AUTH_TOKEN: ${{ secrets.OPSMONSTER_AUTH_TOKEN_V2 }}
          BASE_URL: ${{ secrets.OPSMONSTER_BASE_URL_V2 }}
        with:
          application: ${{ inputs.APPLICATION }}
          branch: ${{ needs.build-and-push.outputs.pr_ref }}
          release-name-length: 40
          pr-title: ${{ needs.build-and-push.outputs.pr_title }}
          pr-url: ${{ needs.build-and-push.outputs.pr_url }}
          pr-assignee: ${{ needs.build-and-push.outputs.pr_assignee }}
          profile: ${{ inputs.profile }}
          image-tag: ${{ needs.build-and-push.outputs.image_tag }}
          base-domain: ${{ inputs.base-domain }}
          destination: ${{ inputs.destination }}
      - name: Comment on PR
        uses: bucketplace/pull-request-add-comment-action@main
        with:
          message: |-
            üöÄ preview endpoint Í∞Ä ÏÉùÏÑ±ÎêòÏóàÏäµÎãàÎã§. [link](https://${{ steps.pr.outputs.endpoint }})
            ```
            https://${{ steps.pr.outputs.endpoint }}
            ```
            üéÅ preview context
            ```json
            ${{ steps.pr.outputs.context }}
            ```
          GITHUB_TOKEN: ${{ secrets.BP_DEPLOYER_GITHUB_TOKEN }}
      - if: ${{ failure() }}
        uses: bucketplace/pull-request-add-comment-action@main
        with:
          message: |-
            preview Î∞∞Ìè¨ Ïã§Ìå®
          GITHUB_TOKEN: ${{ secrets.BP_DEPLOYER_GITHUB_TOKEN }}

  clean-up-preview:
    runs-on: [self-hosted, Linux, X64, no-cache]
    if: github.event.action == 'closed'
    steps:
      - name: Clean up preview resources
        uses: bucketplace/preview-delete-action@v2.1.0
        env:
          AUTH_TOKEN: ${{ secrets.OPSMONSTER_AUTH_TOKEN_V2 }}
          BASE_URL: ${{ secrets.OPSMONSTER_BASE_URL_V2 }}
        with:
          application: ${{ inputs.APPLICATION }}
          branch: ${{ github.head_ref }}
          release-name-length: 40
